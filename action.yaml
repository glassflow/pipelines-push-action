# action.yml
name: 'GlassFlow Pipelines Push action'
description: 'This Github Action lets you automate GlassFlow pipelines deployments as code'
branding:
  icon: zap
  color: purple
inputs:
  dry-run:
    description: Do not actually push any changes
    required: false
    default: "false"
  glassflow-personal-access-token:
    description: |
      GlassFlow personal access token to interact with API.
    required: true
  pipelines-dir:
    description: |
      Path to directory with GlassFlow pipelines.
      Default 'pipelines'
    default: "pipelines"
  sha:
    description: |
      SHA from github action commit to use. If empy, it will use latest version.
      Default ''
    default: ""

outputs:
  to-create-count:
    description: Number of new pipelines to create
    value: ${{ steps.run.outputs.to-create-count }}
  to-create-ids:
    description: Pipeline IDs that were created
    value: ${{ steps.run.outputs.to-create-ids }}
  to-update-count:
    description: Number of pipelines to update
    value: ${{ steps.run.outputs.to-update-count }}
  to-update-ids:
    description: Pipeline IDs that will be updated
    value: ${{ steps.run.outputs.to-update-ids }}
  to-delete-count:
    description: Number of pipelines to delete
    value: ${{ steps.run.outputs.to-delete-count }}
  to-delete-ids:
    description: Pipeline IDs that will be deleted
    value: ${{ steps.run.outputs.to-delete-ids }}
  space-to-create-count:
    description: Number of spaces to be created
    value: ${{ steps.run.outputs.space-to-create-count }}
  spaces-to-create-ids:
    description: Space IDs that were created
    value: ${{ steps.run.outputs.spaces-to-create-ids }}

runs:
  using: "composite"
  steps:
    - name: Get file changes
      id: changed-files
      uses: tj-actions/changed-files@v45
      with:
        recover_deleted_files: 'true'
        recover_files: |
          ${{ inputs.pipelines-dir }}/**/*.{yaml,yml}
        files: |
          ${{ inputs.pipelines-dir }}/**/*.{py,yaml,yml}
          ${{ inputs.pipelines-dir }}/**/requirements.txt

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Download repo
      shell: bash
      id: setup
      run: |
        SHA="${{ inputs.sha }}"
        if [ ${SHA} ];
        then
          VERSION=$(echo ${SHA} | cut -c1-7)
          ARCHIVE="${VERSION}.tar.gz"
          SCRIPT_DIR="pipelines-push-action-${SHA}"
        else
          VERSION=1
          ARCHIVE="refs/tags/v${VERSION}.tar.gz"
          SCRIPT_DIR="pipelines-push-action-${VERSION}"
        fi;
        
        TEMPDIR=/tmp/action-script/
        mkdir -p ${TEMPDIR}
        cd ${TEMPDIR}
        echo "tempdir=${TEMPDIR}${SCRIPT_DIR}" >> $GITHUB_OUTPUT
        
        echo "Downloading action script ..."
        wget "https://github.com/glassflow/pipelines-push-action/archive/${ARCHIVE}"
        tar -xzvf *.tar.gz

    - uses: actions/setup-python@v5
      with:
        python-version-file: "${{ steps.setup.outputs.tempdir }}pyproject.toml"

    - name: Install
      shell: bash
      run: uv sync --directory ${{ steps.setup.outputs.tempdir }}

    - name: Set arguments
      id: set-arguments
      shell: bash
      run: |
        args="args=-t ${{ inputs.glassflow-personal-access-token }} --pipelines-dir ${{ inputs.pipelines-dir }}";
        if ${{ inputs.dry-run == 'true' }}; 
        then
          args+=" --dry-run";
        fi;
        if [ "${{ steps.changed-files.outputs.deleted_files }}" ];
        then
          args+=" --files-deleted ${{ steps.changed-files.outputs.deleted_files }}";
        fi;
        if [ "${{ steps.changed-files.outputs.all_changed_files }}" ];
        then
          args+=" --files-changed ${{ steps.changed-files.outputs.all_changed_files }}";
        fi;
        echo $args >> $GITHUB_OUTPUT

    - name: Run
      id: run
      shell: bash
      run: pipelines-push-action ${{ steps.set-arguments.outputs.args }}

    - name: Clean up
      id: clean-up
      shell: bash
      run: rm -rf ${{ steps.setup.outputs.tempdir }}
          
    - name: Commit new Pipeline IDs
      if: ${{ (inputs.dry-run == 'false') && steps.run.outputs.to-create-ids }}
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: Apply automatic changes (add new pipeline IDs)